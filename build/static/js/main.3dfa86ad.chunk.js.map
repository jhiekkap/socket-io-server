{"version":3,"sources":["Chat.js","App.js","serviceWorker.js","index.js"],"names":["ENDPOINT","EMOIJIS","heart","happy","sad","Chat","useState","content","setContent","messages","setMessages","sender","setSender","receiver","setReceiver","recipients","setRecipients","sendingEmoiji","setSendingEmoiji","showEmoiji","setShowEmoiji","emoijiStyles","cursor","marginRight","fontSize","console","log","useEffect","socket","socketIOClient","query","chatID","on","data","prevState","concat","senderChatID","emoiji","setTimeout","disconnect","handleSendEmoiji","emit","receiverChatID","style","padding","onSubmit","e","preventDefault","type","value","onChange","target","disabled","checked","name","onClick","map","msg","i","key","position","top","right","App","loadClient","setLoadClient","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3dfa86ad.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst ENDPOINT = process.env.NODE_ENV === 'production' ? 'https://young-dawn-64939.herokuapp.com/' : \"http://127.0.0.1:4001\";\r\nconst emoijiStyles = {\r\n    cursor: 'pointer',\r\n    marginRight: '2%'\r\n}\r\nconst EMOIJIS = {\r\n    heart: '‚ù§Ô∏èÔ∏è',\r\n    happy: 'üòä',\r\n    sad: '‚òπÔ∏è'\r\n}\r\n\r\n\r\n\r\nexport default function Chat() {\r\n    const [content, setContent] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n    const [sender, setSender] = useState('')\r\n    const [receiver, setReceiver] = useState('')\r\n    const [recipients, setRecipients] = useState('')\r\n    const [file, setFile] = useState(null)\r\n    const [purity, setPurity] = useState(50)\r\n    const [overtones, setOvertones] = useState(50)\r\n    const [sendingEmoiji, setSendingEmoiji] = useState(false)\r\n    const [showEmoiji, setShowEmoiji] = useState('')\r\n\r\n    const emoijiStyles = {\r\n        cursor: 'pointer',\r\n        marginRight: '2%',\r\n        fontSize: sendingEmoiji && '20px'\r\n    }\r\n\r\n\r\n    //console.log('MESSAGES', messages)\r\n    //console.log('SENDER: ', sender)\r\n    // console.log('RECEIVER: ', receiver)\r\n    console.log('RECIPIENTS: ', recipients)\r\n\r\n    useEffect(() => {\r\n\r\n        console.log('USE EFFECT')\r\n        /* const random = parseInt(Math.random() * 2)\r\n        console.log('Random', random)\r\n        const chatID = random === 0 ? 'a' : 'b'\r\n        console.log('chatId', chatID)\r\n        setReceiver(random === 1 ? 'a' : 'b')\r\n        setSender(chatID)\r\n */\r\n        const socket = socketIOClient(ENDPOINT, {\r\n            query: {\r\n                chatID: sender\r\n            }\r\n        });\r\n\r\n        socket.on(\"receive_message\", (data) => {\r\n            console.log('NEW MESSAGE', data)\r\n            if (data.content) {\r\n                setMessages(prevState => prevState.concat(data.senderChatID + ': ' + data.content));\r\n            } else if (data.emoiji) {\r\n                setSendingEmoiji(true)\r\n                setShowEmoiji(data.emoiji)\r\n                setTimeout(() => {\r\n                    setSendingEmoiji(false)\r\n                    setShowEmoiji('')\r\n                }, 2000)\r\n            }\r\n        });\r\n\r\n        // CLEAN UP THE EFFECT\r\n        return () => socket.disconnect();\r\n        //\r\n\r\n    }, [sender, receiver]);\r\n\r\n\r\n    const handleSendMessage = (e) => {\r\n        e.preventDefault()\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.emit('send_message', {\r\n            receiverChatID: receiver,\r\n            senderChatID: sender,\r\n            content,\r\n            recipients,\r\n        })\r\n        if (recipients !== 'ALL') {\r\n            setMessages(prevState => prevState.concat(sender + ': ' + content));\r\n        }\r\n        setContent('')\r\n    }\r\n\r\n    const handleSendEmoiji = (emoiji) => {\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.emit('send_message', {\r\n            receiverChatID: receiver,\r\n            senderChatID: sender,\r\n            recipients,\r\n            emoiji\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div style={{ padding: '5%' }}>\r\n            <form onSubmit={handleSendMessage}>\r\n                <div >\r\n                    <div>\r\n                        L√ÑHETT√ÑJ√Ñ\r\n                    </div>\r\n                    <input\r\n                        type='text'\r\n                        value={sender}\r\n                        onChange={(e) => setSender(e.target.value)}\r\n                    />\r\n                </div>\r\n                <br />\r\n                {recipients !== 'ALL' && <div>\r\n                    <div>\r\n                        VASTAANOTTAJA\r\n                    </div>\r\n                    <input\r\n                        type='text'\r\n                        value={receiver}\r\n                        onChange={(e) => setReceiver(e.target.value)}\r\n                    />\r\n                </div>}\r\n                <br />\r\n                <div>\r\n                    <div>\r\n                        VIESTI\r\n                    </div>\r\n                    <input\r\n                        type='text'\r\n                        value={content}\r\n                        onChange={(e) => setContent(e.target.value)}\r\n                    />\r\n                    <div>\r\n                        <br />\r\n                        <button type='submit' disabled={!sender}>PUSH ME</button>\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                        <input\r\n                            type='checkbox'\r\n                            checked={recipients !== 'ALL'}\r\n                            onChange={() => setRecipients(recipients !== 'ALL' ? 'ALL' : '')}\r\n                            name='recipients'\r\n                        />\r\n                        <label>YKSITYINEN</label>\r\n                        <input\r\n                            type='checkbox'\r\n                            checked={recipients === 'ALL'}\r\n                            onChange={() => setRecipients(recipients === 'ALL' ? '' : 'ALL')}\r\n                            name='recipients'\r\n                        />\r\n                        <label>KAIKKI</label>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n            <br />\r\n          {(recipients === 'ALL' || receiver)  &&  <div>\r\n                <span onClick={() => handleSendEmoiji('heart')} style={emoijiStyles}> ‚ù§Ô∏èÔ∏è </span>\r\n                <span onClick={() => handleSendEmoiji('happy')} style={emoijiStyles}> üòä </span>\r\n                <span onClick={() => handleSendEmoiji('sad')} style={emoijiStyles}> ‚òπÔ∏è </span>\r\n            </div>}\r\n            <div>\r\n                <ul>\r\n                    {messages.map((msg, i) => <li key={i}>{msg}</li>)}\r\n                </ul>\r\n            </div>\r\n            {showEmoiji && <div style={{ position: 'fixed', top: '50px', right: '50px', fontSize: '300px' }}>\r\n                {EMOIJIS[showEmoiji]}\r\n            </div>}\r\n        </div>\r\n\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport ClientComponent from \"./ClientComponent\";\r\nimport Chat from './Chat'\r\n\r\nfunction App() {\r\n  const [loadClient, setLoadClient] = useState(true);\r\n  \r\n\r\n  return (\r\n    <>\r\n      {/* LOAD OR UNLOAD THE CLIENT */}\r\n      <button onClick={() => setLoadClient(prevState => !prevState)}>\r\n        STOPPA CLIENTEN\r\n      </button>\r\n      {/* SOCKET IO CLIENT*/}\r\n     {/*  {loadClient ? <ClientComponent /> : null} */}\r\n      {loadClient ? <Chat /> : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}