{"version":3,"sources":["Stream.js","View.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["Stream","currentUser","receiver","canvasRef","useRef","videoRef","useState","loggings","setLoggings","useEffect","current","width","height","context","getContext","console","log","socket","socketIOClient","query","chatID","logger","msg","navigator","mediaDevices","getUserMedia","video","audio","then","stream","videoStream","srcObject","error","src","URL","createObjectURL","concat","loadCamera","catch","setInterval","drawImage","emit","senderChatID","receiverChatID","toDataURL","Draw","disconnect","ref","autoPlay","map","i","key","View","imgRef","videoSender","alt","ENDPOINT","EMOIJIS","heart","happy","sad","users","Chat","content","setContent","messages","setMessages","setCurrentUser","setReceiver","recipients","setRecipients","sendingEmoiji","setSendingEmoiji","showEmoiji","setShowEmoiji","setVideoSender","emoijiStyles","cursor","marginRight","fontSize","on","data","prevState","emoiji","setTimeout","handleSendEmoiji","style","padding","Grid","container","spacing","item","md","onSubmit","e","preventDefault","value","onChange","target","user","type","disabled","checked","name","onClick","position","top","right","display","App","loadClient","setLoadClient","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bb8cf5fa.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport socketIOClient from \"socket.io-client\";\r\nconst ENDPOINT = process.env.NODE_ENV === 'production' ? 'https://fierce-beach-86051.herokuapp.com/' : \"http://127.0.0.1:4001\";\r\n\r\n\r\nconst Stream = ({ currentUser, receiver }) => {\r\n\r\n    const canvasRef = useRef();\r\n    const videoRef = useRef()\r\n    const [loggings, setLoggings] = useState([])\r\n\r\n    useEffect(() => {\r\n        canvasRef.current.width = 180\r\n        canvasRef.current.height = 150;\r\n        const context = canvasRef.current.getContext('2d');\r\n        console.log('CANVASREF', canvasRef)\r\n        console.log('CONTEX', context)\r\n        context.width = canvasRef.current.width;\r\n        context.height = canvasRef.current.height;\r\n\r\n        const socket = socketIOClient(ENDPOINT, {\r\n            query: {\r\n                chatID: currentUser\r\n            }\r\n        });\r\n\r\n        function logger(msg) {\r\n            console.log(msg);\r\n        }\r\n\r\n        function loadCamera(videoStream) {\r\n            try {\r\n                videoRef.current.srcObject = videoStream;\r\n            }\r\n\r\n            catch (error) {\r\n                videoRef.current.src = URL.createObjectURL(videoStream);\r\n            }\r\n            setLoggings(loggings => loggings.concat(\"Camera connected\"))\r\n            logger(\"Camera connected\");\r\n        }\r\n\r\n        function loadFail() {\r\n            logger(\"Camera not connected\");\r\n        }\r\n\r\n        function Draw(video, context) {\r\n            context.drawImage(video, 0, 0, context.width, context.height);\r\n            socket.emit('send_message', {\r\n                senderChatID: currentUser,\r\n                receiverChatID: receiver,\r\n                videoStream: canvasRef.current.toDataURL('image/webp')\r\n            });\r\n        }\r\n\r\n        /*  navigator.getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msgGetUserMedia);\r\n \r\n         if (navigator.getUserMedia) {\r\n             navigator.getUserMedia({\r\n                 video: true,\r\n                 audio: false\r\n             }, loadCamera, loadFail);\r\n         }\r\n  */\r\n        navigator.mediaDevices && navigator.mediaDevices.getUserMedia({\r\n            video: true,\r\n            audio: false\r\n        })\r\n            .then(stream => loadCamera(stream))\r\n            .catch(error => {\r\n                loadFail() \r\n                setLoggings(loggings => loggings.concat(\"Camera not connected\"))\r\n            })\r\n\r\n\r\n        setInterval(function () {\r\n            Draw(videoRef.current, context);\r\n        }, 0.1);\r\n\r\n        return () => socket.disconnect();\r\n    }, [currentUser, receiver])\r\n\r\n    return <div>\r\n        <video ref={videoRef} src=\"\" width='180' height='150' autoPlay={true}></video>\r\n        <canvas ref={canvasRef} /* style={{ display: \"none\" }} */ ></canvas>\r\n        <ul>{loggings.map((error, i) => <li key={i}>{error}</li>)}</ul>\r\n    </div>\r\n}\r\n\r\nexport default Stream","import React, { useState, useRef, useEffect } from 'react'\r\nimport socketIOClient from \"socket.io-client\";\r\nconst ENDPOINT = process.env.NODE_ENV === 'production' ? 'https://fierce-beach-86051.herokuapp.com/' : \"http://127.0.0.1:4001\";\r\n\r\n\r\nconst View = ({ imgRef, videoSender }) => {\r\n\r\n    // const imgRef = useRef()\r\n    /* const [receiver, setReceiver] = useState(null)\r\n    const [sender, setSender] = useState(null) */\r\n\r\n    /*   useEffect(() => {\r\n          const socket = socketIOClient(ENDPOINT, {\r\n              query: {\r\n                  chatID: currentUser\r\n              }\r\n          });\r\n          socket.on('receive_message', (data) => {\r\n              imgRef.current.src = data.videoStream\r\n              setReceiver(data.receiverChatID)\r\n              setSender(data.senderChatID)\r\n              //console.log(image);\r\n          });\r\n  \r\n          return () => socket.disconnect();\r\n      }, [ receiver, sender]) */\r\n\r\n    return <div>\r\n        <img ref={imgRef} width=\"150\" height=\"120\" alt=\"view\" />\r\n        {videoSender}\r\n    </div>\r\n}\r\n\r\nexport default View","import React, { useEffect, useState, useRef } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { Grid } from '@material-ui/core';\r\nimport Stream from './Stream'\r\nimport View from './View'\r\n\r\nconst ENDPOINT = process.env.NODE_ENV === 'production' ? 'https://fierce-beach-86051.herokuapp.com/' : \"http://127.0.0.1:4001\";\r\nconst emoijiStyles = {\r\n    cursor: 'pointer',\r\n    marginRight: '2%'\r\n}\r\nconst EMOIJIS = {\r\n    heart: '❤️️',\r\n    happy: '😊',\r\n    sad: '☹️'\r\n}\r\n\r\nconst users = ['Jari', 'Sampsa', 'Kasperi', 'Janina']\r\n\r\n\r\n\r\nexport default function Chat() {\r\n    const [content, setContent] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n    const [currentUser, setCurrentUser] = useState(users[0])\r\n    const [receiver, setReceiver] = useState(users[1])\r\n    const [recipients, setRecipients] = useState('')\r\n    const [file, setFile] = useState(null)\r\n    const [purity, setPurity] = useState(50)\r\n    const [overtones, setOvertones] = useState(50)\r\n    const [sendingEmoiji, setSendingEmoiji] = useState(false)\r\n    const [showEmoiji, setShowEmoiji] = useState('')\r\n    const [videoStream, setVideoStream] = useState('')\r\n    const [videoSender, setVideoSender] = useState('')\r\n\r\n    const imgRef = useRef()\r\n\r\n    const emoijiStyles = {\r\n        cursor: 'pointer',\r\n        marginRight: '2%',\r\n        fontSize: sendingEmoiji && '20px'\r\n    }\r\n\r\n\r\n    //console.log('MESSAGES', messages)\r\n    console.log('CURRENT USER: ', currentUser)\r\n    // console.log('RECEIVER: ', receiver)\r\n    console.log('RECIPIENTS: ', recipients)\r\n\r\n    useEffect(() => {\r\n\r\n        console.log('USE EFFECT')\r\n        /* const random = parseInt(Math.random() * 2)\r\n        console.log('Random', random)\r\n        const chatID = random === 0 ? 'a' : 'b'\r\n        console.log('chatId', chatID)\r\n        setReceiver(random === 1 ? 'a' : 'b')\r\n        setCurrentUser(chatID)\r\n */\r\n        const socket = socketIOClient(ENDPOINT, {\r\n            query: {\r\n                chatID: currentUser\r\n            }\r\n        });\r\n\r\n        socket.on(\"receive_message\", (data) => {\r\n            //console.log('NEW MESSAGE', data)\r\n            if (data.content) {\r\n                setMessages(prevState => prevState.concat(data.senderChatID + '=> ' + data.receiverChatID + ': ' + data.content));\r\n            } else if (data.emoiji) {\r\n                setSendingEmoiji(true)\r\n                setShowEmoiji(data.emoiji)\r\n                setTimeout(() => {\r\n                    setSendingEmoiji(false)\r\n                    setShowEmoiji('')\r\n                }, 2000)\r\n            } else if (data.videoStream) {\r\n                //setVideoStream(data.videoStream)\r\n                imgRef.current.src = data.videoStream\r\n                if (videoSender !== data.senderChatID) {\r\n                    setVideoSender(data.senderChatID)\r\n                }\r\n            }\r\n        });\r\n\r\n        // CLEAN UP THE EFFECT\r\n        return () => socket.disconnect();\r\n        //\r\n\r\n    }, [currentUser, receiver]);\r\n\r\n\r\n    const handleSendMessage = (e) => {\r\n        e.preventDefault()\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.emit('send_message', {\r\n            receiverChatID: receiver,\r\n            senderChatID: currentUser,\r\n            content,\r\n            recipients,\r\n        })\r\n        setMessages(prevState => prevState.concat(currentUser + '=> ' + receiver + ': ' + content));\r\n        setContent('')\r\n    }\r\n\r\n    const handleSendEmoiji = (emoiji) => {\r\n        const socket = socketIOClient(ENDPOINT);\r\n        socket.emit('send_message', {\r\n            receiverChatID: receiver,\r\n            senderChatID: currentUser,\r\n            recipients,\r\n            emoiji\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div style={{ padding: '5%' }}>\r\n            <Grid container spacing={3}>\r\n                <Grid item md={6}>\r\n                    <Stream currentUser={currentUser} receiver={receiver} />\r\n                    <form onSubmit={handleSendMessage}>\r\n                        <div >\r\n                            <div>\r\n                                LÄHETTÄJÄ\r\n                            </div>\r\n                            <select value={currentUser} onChange={(e) => setCurrentUser(e.target.value)}>\r\n                                {users.map((user, i) => <option key={i}>{user}</option>)}\r\n                            </select>\r\n                        </div>\r\n                        <br />\r\n                        <div>\r\n                            <div>\r\n                                VASTAANOTTAJA\r\n                            </div>\r\n                            <select value={receiver} onChange={(e) => setReceiver(e.target.value)}>\r\n                                {users.map((user, i) => <option key={i}>{user}</option>)}\r\n                            </select>\r\n                        </div>\r\n                        <br />\r\n                        <div>\r\n                            <div>\r\n                                VIESTI\r\n                            </div>\r\n                            <input\r\n                                type='text'\r\n                                value={content}\r\n                                onChange={(e) => setContent(e.target.value)}\r\n                            />\r\n                            <div>\r\n                                <br />\r\n                                <button type='submit' disabled={!currentUser}>PUSH ME</button>\r\n                            </div>\r\n                            <br />\r\n                            <div>\r\n                                <input\r\n                                    type='checkbox'\r\n                                    checked={recipients !== 'ALL'}\r\n                                    onChange={() => setRecipients(recipients !== 'ALL' ? 'ALL' : '')}\r\n                                    name='recipients'\r\n                                />\r\n                                <label>YKSITYINEN</label>\r\n                                <input\r\n                                    type='checkbox'\r\n                                    checked={recipients === 'ALL'}\r\n                                    onChange={() => setRecipients(recipients === 'ALL' ? '' : 'ALL')}\r\n                                    name='recipients'\r\n                                />\r\n                                <label>KAIKKI</label>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    <br />\r\n                    <div>\r\n                        <span onClick={() => handleSendEmoiji('heart')} style={emoijiStyles}> ❤️️ </span>\r\n                        <span onClick={() => handleSendEmoiji('happy')} style={emoijiStyles}> 😊 </span>\r\n                        <span onClick={() => handleSendEmoiji('sad')} style={emoijiStyles}> ☹️ </span>\r\n                    </div>\r\n                    <div>\r\n                        <ul>\r\n                            {messages.map((msg, i) => <li key={i}>{msg}</li>)}\r\n                        </ul>\r\n                    </div>\r\n                    {showEmoiji && <div style={{ position: 'fixed', top: '50px', right: '50px', fontSize: '300px' }}>\r\n                        {EMOIJIS[showEmoiji]}\r\n                    </div>}\r\n                </Grid>\r\n                <Grid item md={6} style={{ display: videoSender ? 'block' : 'none' }}>\r\n                    <View imgRef={imgRef} videoSender={videoSender} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport ClientComponent from \"./ClientComponent\";\r\nimport Chat from './Chat'\r\n\r\nfunction App() {\r\n  const [loadClient, setLoadClient] = useState(true); \r\n\r\n  return (\r\n    <>\r\n      {/* LOAD OR UNLOAD THE CLIENT */}\r\n      <button onClick={() => setLoadClient(prevState => !prevState)}>\r\n        STOPPA CLIENTEN\r\n      </button>\r\n      {/* SOCKET IO CLIENT*/}\r\n     {/*  {loadClient ? <ClientComponent /> : null} */}\r\n      {loadClient ? <Chat /> : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}